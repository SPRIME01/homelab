name: Dev CI

on:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Devbox
        run: |
          # Attempt to download Devbox installer; if unavailable, skip without failing the job
          DEVBOX_URL="https://jetpack.io/devbox/install.sh"
          echo "Checking Devbox installer at $DEVBOX_URL"
          if curl --head --silent --fail "$DEVBOX_URL" >/dev/null 2>&1; then
            curl -fsSL "$DEVBOX_URL" | sh
            echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          else
            echo "Devbox installer not available at $DEVBOX_URL - skipping Devbox install"
          fi
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
      - name: Bootstrap environment
        run: ./lib/env-loader.sh ci
      - name: Install uv & Python venv (CI)
        run: |
          # Pick a Python executable; export it for downstream steps
          if python3.12 -V >/dev/null 2>&1; then
            PYTHON_EXEC=python3.12
          else
            PYTHON_EXEC=python3
          fi
          echo "PYTHON_EXEC=$PYTHON_EXEC" >> "$GITHUB_ENV"

          # Install pipx with the chosen python and ensure it's on PATH
          # Note: `pipx ensurepath` is non-fatal in runners; warn but continue.
          "$PYTHON_EXEC" -m pip install --user --upgrade pipx
          "$PYTHON_EXEC" -m pipx ensurepath || echo "⚠️ pipx ensurepath failed; PATH may need adjustment"
          # If pipx is available as a module, call it through python -m pipx
          "$PYTHON_EXEC" -m pipx install uv

          # Ensure Python is installed under uv (idempotent)
          PYTHON_VERSION=$("$PYTHON_EXEC" -V | cut -d' ' -f2 | cut -d'.' -f1,2)
          uv python install "$PYTHON_VERSION" >/dev/null 2>&1

          # Create a project-local venv using uv (fallback to $PYTHON_EXEC -m venv)
          if [ ! -d .venv ]; then
            uv venv .venv --python "$PYTHON_VERSION" >/dev/null 2>&1 || "$PYTHON_EXEC" -m venv .venv
          fi

          # Persist venv to subsequent steps by exporting to GITHUB_ENV and prepending PATH
          echo "VIRTUAL_ENV=$PWD/.venv" >> "$GITHUB_ENV"
          echo "$PWD/.venv/bin" >> "$GITHUB_PATH"

          # Verify the virtual environment is properly activated
          echo "Python executable: $(which "$PYTHON_EXEC")"
          echo "Python version: $("$PYTHON_EXEC" --version)"
          echo "Virtual environment: $VIRTUAL_ENV"
      - name: Activate Python virtual environment
        run: |
          source .venv/bin/activate
          echo "Activated virtual environment"
      - name: Ensure pipx tools are in PATH
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "Added $HOME/.local/bin to PATH"
      - name: Lint
        run: npx nx run-many --target=lint --all
      - name: Set UV_CACHE_DIR
        run: echo "UV_CACHE_DIR=$HOME/.cache/uv" >> $GITHUB_ENV
      - name: Start vector HTTP stub
        run: |
          cat > /tmp/vector_stub.py <<'PY'
          from http.server import BaseHTTPRequestHandler, HTTPServer
          import threading, sys
          class Handler(BaseHTTPRequestHandler):
              def do_POST(self):
                  length = int(self.headers.get('content-length', 0))
                  body = self.rfile.read(length)
                  # record requests to file for debugging
                  with open('/tmp/vector_received.log', 'ab') as f:
                      f.write(body + b'\n')
                  self.send_response(200)
                  self.end_headers()
              def log_message(self, fmt, *args):
                  return
          server = HTTPServer(('127.0.0.1', 45995), Handler)
          try:
              server.serve_forever()
          except KeyboardInterrupt:
              pass
          PY
          # Run in background and persist pid so we can kill it after tests
          python3 /tmp/vector_stub.py & echo $! > /tmp/vector_stub.pid
          # Wait for listener to come up
          for i in {1..10}; do curl -sS --fail http://127.0.0.1:45995/ >/dev/null 2>&1 && break || sleep 0.5; done
      - name: Run integration OTLP test
        run: |
          chmod +x tests/logging/test_integration_otlp_runner.sh
          ./tests/logging/test_integration_otlp_runner.sh
      - name: Test
        run: npx nx run-many --target=test --all

      - name: Stop vector HTTP stub and show received logs
        if: always()
        run: |
          if [ -f /tmp/vector_stub.pid ]; then
            kill "$(cat /tmp/vector_stub.pid)" || true
            rm -f /tmp/vector_stub.pid
          fi
          echo "---- contents of /tmp/vector_received.log ----"
          [ -f /tmp/vector_received.log ] && sed -n '1,200p' /tmp/vector_received.log || echo "(no requests received)"
