name: Main Release

on:
  push:
    branches: ["main"]
    paths:
      - 'lib/**'
      - 'tests/**'
      - '.github/workflows/**'
  pull_request:
    paths:
      - 'lib/**'
      - 'tests/**'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit tests (isolated)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Ensure pnpm is available
        run: |
          set -euo pipefail
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found — enabling via corepack"
            if command -v corepack >/dev/null 2>&1; then
              corepack enable || true
              corepack prepare pnpm@9 --activate || true
            fi
          fi
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "corepack failed to activate pnpm; installing globally"
            npm install -g pnpm@9
          fi
          pnpm -v
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: "pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}"
      - name: Install dependencies (fast)
        run: pnpm install --frozen-lockfile
      - name: Run global tests
        run: npx nx run-many --target=test --all

  logging-tests:
    runs-on: ubuntu-latest
    name: Quick logging tests
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Ensure pnpm is available
        run: |
          set -euo pipefail
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found — enabling via corepack"
            if command -v corepack >/dev/null 2>&1; then
              corepack enable || true
              corepack prepare pnpm@9 --activate || true
            fi
          fi
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "corepack failed to activate pnpm; installing globally"
            npm install -g pnpm@9
          fi
          pnpm -v
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Setup Python for uv
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install and configure uv
        run: |
          set -euo pipefail
          python -m pip install --user --upgrade pipx
          python -m pipx ensurepath
          export PATH="$HOME/.local/bin:$PATH"
          pipx install uv
          uv venv .venv --python 3.12
          echo "VIRTUAL_ENV=$PWD/.venv" >> "$GITHUB_ENV"
          echo "$PWD/.venv/bin" >> "$GITHUB_PATH"
      - name: Verify Python venv
        run: |
          set -euo pipefail
          which python
          python --version
      - name: Install Python dependencies
        run: |
          set -euo pipefail
          uv pip install -r requirements.txt
      - name: Install Python dependencies
        run: |
          set -euo pipefail
          uv pip install -r requirements.txt
      - name: Start mock OTLP receiver
        run: |
          set -x
          echo "Python executable: $(which python3)"
          echo "Python version: $(python3 --version)"
          echo "PWD: $(pwd)"
          echo "Listing tests/logging:"; ls -la tests/logging || true
          echo "Starting mock OTLP receiver..."
          mkdir -p /tmp/otlp-test
          chmod +x tests/logging/mock_otlp_receiver.py
          python3 tests/logging/mock_otlp_receiver.py --ports 43215 51417 --payload-dir /tmp/otlp-test --pid-file /tmp/otlp-test/pids.txt > /tmp/otlp-receiver.log 2>&1 &
          RECEIVER_PID=$!
          echo $RECEIVER_PID > /tmp/otlp-test/receiver.pid
          echo "Mock receiver started with PID: $RECEIVER_PID"

          # Wait for the receiver to be ready (up to 30 seconds)
          for i in {1..30}; do
            if grep -q "All servers started" /tmp/otlp-receiver.log 2>/dev/null; then
              echo "Mock receiver is ready!"
              sed -n '1,200p' /tmp/otlp-receiver.log || true
              break
            fi
            if [ $i -eq 30 ]; then
              echo "ERROR: Mock receiver did not start within 30 seconds"
              echo "--- /tmp/otlp-receiver.log (tail) ---"
              tail -n +1 /tmp/otlp-receiver.log || echo "No log file found"
              echo "--- /tmp/otlp-test contents ---"
              ls -la /tmp/otlp-test || true
              exit 1
            fi
            sleep 1
          done
      - name: Make tests executable
        run: chmod +x tests/test_vector_logger.sh tests/test_vector_logger_failure.sh tests/test_vector_logger_otlp.sh
      - name: Run logging tests (nx)
        run: npx nx run logging:test
      - name: Run integration OTLP test
        run: |
          chmod +x tests/logging/test_integration_otlp_runner.sh
          ./tests/logging/test_integration_otlp_runner.sh
      - name: Stop mock OTLP receiver
        if: always()
        run: |
          set -x || true

          echo "---- Dumping receiver log ----"
          if [ -f /tmp/otlp-receiver.log ]; then
            sed -n '1,200p' /tmp/otlp-receiver.log || true
          else
            echo "No /tmp/otlp-receiver.log found"
          fi

          echo "---- Received payloads ----"
          if ls /tmp/otlp-test/payload_*.json 1> /dev/null 2>&1; then
            for f in /tmp/otlp-test/payload_*.json; do
              echo "File: $f"
              head -n 200 "$f" || true
            done
          else
            echo "No payload files found in /tmp/otlp-test"
            ls -la /tmp/otlp-test || true
          fi

          if [ -f /tmp/otlp-test/receiver.pid ]; then
            PID=$(cat /tmp/otlp-test/receiver.pid)
            echo "Killing receiver PID: $PID"
            if kill -0 $PID 2>/dev/null; then
              kill $PID || true
              sleep 1
              kill -9 $PID || true
            fi
          fi
          pkill -f "mock_otlp_receiver.py" || true

  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Devbox
        run: |
          curl -fsSL https://jetpack.io/devbox/install.sh | sh
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Ensure pnpm is available
        run: |
          set -euo pipefail
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found — enabling via corepack"
            if command -v corepack >/dev/null 2>&1; then
              corepack enable || true
              corepack prepare pnpm@9 --activate || true
            fi
          fi
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "corepack failed to activate pnpm; installing globally"
            npm install -g pnpm@9
          fi
          pnpm -v
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
      - name: Bootstrap environment
        run: ./lib/env-loader.sh ci
      - name: Setup Python for uv
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install and configure uv
        run: |
          set -euo pipefail
          python -m pip install --user --upgrade pipx
          python -m pipx ensurepath
          export PATH="$HOME/.local/bin:$PATH"
          pipx install uv
          uv venv .venv --python 3.12
          echo "VIRTUAL_ENV=$PWD/.venv" >> "$GITHUB_ENV"
          echo "$PWD/.venv/bin" >> "$GITHUB_PATH"
      - name: Verify Python venv
        run: |
          set -euo pipefail
          which python
          python --version
      - name: Lint
        run: npx nx run-many --target=lint --all
      - name: Start mock OTLP receiver
        run: |
          echo "Python version: $(python3 --version)"
          echo "Starting mock OTLP receiver..."
          mkdir -p /tmp/otlp-test
          chmod +x tests/logging/mock_otlp_receiver.py
          python3 tests/logging/mock_otlp_receiver.py --ports 43215 51417 --payload-dir /tmp/otlp-test --pid-file /tmp/otlp-test/pids.txt > /tmp/otlp-receiver.log 2>&1 &
          RECEIVER_PID=$!
          echo $RECEIVER_PID > /tmp/otlp-test/receiver.pid
          echo "Mock receiver started with PID: $RECEIVER_PID"

          # Wait for the receiver to be ready (up to 10 seconds)
          for i in {1..10}; do
            if grep -q "All servers started" /tmp/otlp-receiver.log 2>/dev/null; then
              echo "Mock receiver is ready!"
              cat /tmp/otlp-receiver.log
              break
            fi
            if [ $i -eq 10 ]; then
              echo "ERROR: Mock receiver did not start within 10 seconds"
              cat /tmp/otlp-receiver.log || echo "No log file found"
              exit 1
            fi
            sleep 1
          done
      - name: Test
        run: npx nx run-many --target=test --all
      - name: Logging Check
        run: npx nx run-many --target=logging --all
      - name: Build
        run: npx nx run-many --target=build --all
      - name: Deploy
        run: npx nx run-many --target=deploy --all
      - name: Stop mock OTLP receiver
        if: always()
        run: |
          if [ -f /tmp/otlp-test/receiver.pid ]; then
            PID=$(cat /tmp/otlp-test/receiver.pid)
            if kill -0 $PID 2>/dev/null; then
              kill $PID
              sleep 1
              if kill -0 $PID 2>/dev/null; then
                kill -9 $PID
              fi
            fi
          fi
          pkill -f "mock_otlp_receiver.py" || true
